package models

import (
	"time"

	"github.com/paulmach/go.geo"
	"github.com/revel/revel"
)

// Case is an aid case generated by one or more reports
type Case struct {
	Latitude    float64 `json:"latitude"`
	Longitude   float64 `json:"longitude"`
	Description string  `json:"description"`
	ReportCount int64   `json:"reportCount"`
	Verified    bool    `json:"verified"`
	Created     int64   `json:"created"`
}

// CaseCollection is a slce of cases
type CaseCollection struct {
	data []Case
}

// GetNearbyCase iterates over the data and returns the index of the first case it finds
// within distanceThreshold meters of the lat and long provided.
func (cc *CaseCollection) GetNearbyCase(lat float64, long float64, distanceThreshold float64) int {
	point := geo.NewPointFromLatLng(lat, long)
	for i, d := range cc.data {
		casePoint := geo.NewPointFromLatLng(d.Latitude, d.Longitude)
		if casePoint.GeoDistanceFrom(point, true) <= distanceThreshold {
			return i
		}
	}
	return -1
}

// Append appends a Case onto the CaseCollection
func (cc *CaseCollection) Append(c Case) {
	cc.data = append(cc.data, c)
}

// Update edits the fields on the Case at position i in the CaseCollection with data
// from the report
func (cc *CaseCollection) Update(i int, r Report) {
	pointSet := geo.NewPointSet()
	pointSet.Push(geo.NewPointFromLatLng(cc.data[i].Latitude, cc.data[i].Longitude))
	pointSet.Push(geo.NewPointFromLatLng(r.Latitude, r.Longitude))

	cc.data[i].Description += "|" + r.Description
	// Update the Case lat/long to the centroid of itself and the report being used
	// to update it
	cc.data[i].Latitude = pointSet.Centroid().Lat()
	cc.data[i].Longitude = pointSet.Centroid().Lng()
	cc.data[i].ReportCount++
}

// GetData gets the data from the CaseCollection
func (cc *CaseCollection) GetData() []Case {
	return cc.data
}

// Validate will validate the Case struct
func (c *Case) Validate(v *revel.Validation) {
	v.Check(c.Latitude,
		revel.ValidRequired(),
		revel.ValidRange(-80, 85))

	v.Check(c.Longitude,
		revel.ValidRequired(),
		revel.ValidRange(-180, 180))

	v.Check(c.Description,
		revel.ValidMaxSize(255))
}

// GetFromReports takes a slice of Report objects and consolidates them into
// one or more Case objects
func (c *Case) GetFromReports(reports []Report) []Case {
	distanceThreshold := 50.0
	log := revel.AppLog.New("method", "CaseCollection.GetNearbyCase")

	cc := CaseCollection{}

	// For each report
	for _, r := range reports {
		position := cc.GetNearbyCase(r.Latitude, r.Longitude, distanceThreshold)
		if position >= 0 {
			cc.Update(position, r)
		} else {
			log.Debugf("cc.data has %d elements, adding 1", len(cc.data))
			newCase := Case{
				Latitude:    r.Latitude,
				Longitude:   r.Longitude,
				Description: r.Description,
				ReportCount: 1,
				Created:     time.Now().Unix(),
			}
			cc.Append(newCase)
		}
	}

	return cc.GetData()
}
